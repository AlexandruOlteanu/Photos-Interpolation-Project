Copyright Alexandru Olteanu, grupa 312CA    <alexandruolteanu71@gmail.com>


						README

	Nearest Neighbours Interpolation

  To find out the color of a pixel I calculated the distance by each desired pixel and I have them
assigned the value of the pixel at the shortest distance (The points at the boundary have
received the appropriate values to be correctly according to the tests).
  At resize, I did a little differently in the idea that I calculated s_x and s_y with n-1, m-1, p-1, q-1.
However, we followed the same resize rules and assigned the value to each pixel
correct. For resizing an RGB image, I divided the problem into 3 sub-problems and I did
used such resize for a black and white image 3 times.

	Bilinear Interpolation
  
  For resize I used exactly the same reasoning as in requirement 1 and I also used the function
surrounding_points to correctly take the surrounding points from the initial matrix,
taking care to avoid the potential calculation of the inverse of a matrix with determinant 0 (Impossible
when x1 = x2 || y1 == y1). Otherwise, I used formulas to calculate the value in
each new pixel.
  For rotation, I followed the steps in the requirement with transformations and inverses (I took care of the case
when the corresponding initial pixel was out of the matrix, assigning the value with 0) and so we solved
requirement.
  
  
	Bicubic Interpolation

   As with the previous requirements, I followed the steps in the requirement, but it was a bit more bug-forgotten
because for example f (0,1) in the requirement represents not f (x1, y2) but f (y2, x1) (We analyzed after
and I realized it was because it was a function and the coordinates were reversed). Anyway, the requirement
it was solved in the same way and we assigned each pixel the desired value.
   I tried to use all the functions in the skel so that the code is as readable as possible
logical! 
